services:
  node:
    build:
      context: .
      dockerfile: ./.docker/services/node/Dockerfile
    working_dir: /var/www/app
    command: 'bash -c ./.docker/services/node/entrypoint.sh'
    ports:
      - 8000:8000
      - 9229:9229  # For Node.js debugging
    volumes:
      - .:/var/www/app
      - /var/www/app/node_modules
    environment:
      - DATABASE_URL=mysql://sandbox_user:passsword@db:3306/sanbox
      - NODE_ENV=development
    tty: true
    networks:
      - node_network
    depends_on:
      db:
        condition: service_healthy

  db:
    image: mysql:8.0
    restart: unless-stopped
    command: mysqld
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: sanbox
      MYSQL_USER: sandbox_user
      MYSQL_PASSWORD: password
      MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
    ports:
      - '3306:3306'
    volumes:
      - './.docker/services/db/my.cnf:/etc/mysql/conf.d/my.cnf'
      - './.docker/services/db/sql:/docker-entrypoint-initdb.d'
      - mysql_data:/var/lib/mysql
    networks:
      - node_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  nginx:
    build:
      context: ./.docker/services/
      dockerfile: ./nginx/build/Dockerfile
    command: [/bin/bash, .docker/services/nginx/build/command.sh]
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./.docker/services/nginx/conf:/etc/nginx/conf.d
      - .:/var/www/app
    working_dir: /var/www/app
    depends_on:
      - node
    networks:
      - node_network

networks:
  node_network:

volumes:
  mysql_data:
